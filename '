/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root
 * of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include "AIChatMessage.h"
#include <AzCore/std/containers/vector.h>
#include <AzCore/std/string/string.h>

#if !defined(Q_MOC_RUN)
#include <QLabel>
#include <QWidget>
#include <QPushButton>
#include <QVector>
#endif

namespace GenAIFramework
{
    AIChatMessage::AIChatMessage(QWidget* parent, const AZStd::string& message, const AZStd::vector<AZStd::string>& details, bool isAssistantReply)
        : QWidget(parent)
        , message(message)
        , details(details)
        , isAssistantReply(isAssistantReply)

    {
        m_short_layout = new QVBoxLayout();
        m_details_layout = new QVBoxLayout();
        setStyleSheet("QWidget { border-radius: 15px; padding: 15px; }");
        if( isAssistantReply ){
            m_short_layout->setAlignment(Qt::AlignLeft);
            m_details_layout->setAlignment(Qt::AlignLeft);
            auto msg_label = new QLabel(message.c_str());
            setStyleSheet("QWidget { background-color: #303030 }");
            m_short_layout->addWidget(msg_label);
            m_details_layout->addWidget(msg_label);
        } else {
            m_short_layout->setAlignment(Qt::AlignRight);
            m_details_layout->setAlignment(Qt::AlignRight);
            auto msg_label = new QLabel(message.c_str());
            setStyleSheet("QWidget { background-color: #202020 }");
            m_short_layout->addWidget(msg_label);
            m_short_layout->addWidget(msg_label);
        }
        hide_button = new QPushButton("Hide");
        details_button = new QPushButton("Details");
        m_short_layout->addWidget(details_button);
        m_details_layout->addWidget(hide_button);
        for (const auto& detail : details)
        {
            auto detail_label = new QLabel(detail.c_str());
            m_details_layout->addWidget(detail_label);
            m_details.push_back(detail_label);
        }
        setLayout(m_short_layout);
        
        connect(details_button, &QPushButton::clicked, this, &AIChatMessage::OnDetailsButton);
        connect(hide_button, &QPushButton::clicked, this, &AIChatMessage::OnHideButton);

        show();
    }

    void AIChatMessage::OnDetailsButton()
    {

    }

    void AIChatMessage::OnHideButton()
    {
      setLayout(m_short_layout);
      show();
    }

    AIChatMessage::~AIChatMessage()
    {
    }
}
